{"version":3,"sources":["../../../projects/ngx-input-tag/src/ngx-input-tag.component.ts","../../../projects/ngx-input-tag/src/ngx-input-tag.di-tokens.ts","../../../projects/ngx-input-tag/src/ngx-input-tag.component.html","../../../projects/ngx-input-tag/src/ngx-input-tag.module.ts"],"names":["KeyCodes","NGX_INPUT_TAG_TAG_FORMATTER","InjectionToken","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵlistener","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","i0.ɵɵtextInterpolate","i0.ɵɵtemplate","i0.ɵɵproperty","NgxInputTagComponent","tagFormatter","this","tagSuggestions","maxTagLength","maxNumberOfTags","textChange","EventEmitter","_value","prevTagInput","currentNumberOfTags","tagError","onChange","onTouched","Object","defineProperty","prototype","val","registerOnChange","fn","registerOnTouched","writeValue","value","_this","map","v","setCurrentNumberOfTags","validate","handleClick","event","inputElement","nativeElement","contains","target","addTag","tag","formattedTag","tagIsEmpty","length","invalidTagLength","duplicateTag","indexOf","exceedsMaxNumberOfTags","message","plural","push","focus","addTagEvent","input","emit","keyCode","Backspace","pop","Enter","Comma","Tab","preventDefaultTabBehavior","preventDefault","addTagClick","addSuggestedTag","removeTag","filter","t","_a","toString","split","formatter","trim","replace","toLowerCase","i0","ɵɵdirectiveInject","selectors","viewQuery","rf","ctx","$event","ɵɵresolveDocument","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","decls","vars","consts","template","_r1","i0.ɵɵstyleProp","NgxInputTagModule","forRoot","config","ngModule","providers","useValue","imports","CommonModule","declarations","exports"],"mappings":"oeAuBYA,ECnBCC,EAA8B,IAAIC,EAAAA,eAC7C,qGCJAC,EAAAA,eAAAA,EAAAA,MAAAA,GACEC,EAAAA,OAAAA,GACAD,EAAAA,eAAAA,EAAAA,SAAAA,GAAsBE,EAAAA,WAAAA,SAAAA,SAAAA,GAAAA,EAAAA,cAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UAAAA,OAAAA,EAAAA,gBAAAA,UAAAA,EAAAA,MACpBD,EAAAA,OAAAA,EAAAA,OACFE,EAAAA,eACFA,EAAAA,yCAJEC,EAAAA,UAAAA,GAAAC,EAAAA,mBAAAA,IAAAA,EAAAA,yDAaFL,EAAAA,eAAAA,EAAAA,SAAAA,IAAsBE,EAAAA,WAAAA,SAAAA,WAAAA,EAAAA,cAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UAAAA,OAAAA,EAAAA,cAAAA,GAAAA,gBAAAA,MAAyGD,EAAAA,OAAAA,GAAOE,EAAAA,yCAAPC,EAAAA,UAAAA,GAAAE,EAAAA,kBAAAA,6BADjIN,EAAAA,eAAAA,EAAAA,MAAAA,GACEO,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,SAAAA,GACFJ,EAAAA,6CADuEC,EAAAA,UAAAA,GAAAI,EAAAA,WAAAA,UAAAA,EAAAA,kBFQ3DX,EAAAA,EAAAA,WAAAA,EAAAA,SAAQ,KAClBA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,IAAA,GAAA,MACAA,EAAAA,EAAA,MAAA,IAAA,QACAA,EAAAA,EAAA,OAAA,IAAA,SACAA,EAAAA,EAAA,UAAA,IAAA,YACAA,EAAAA,EAAA,QAAA,IAAA,UACAA,EAAAA,EAAA,WAAA,IAAA,aACAA,EAAAA,EAAA,UAAA,IAAA,YACAA,EAAAA,EAAA,MAAA,KAAA,yBA4CA,SAAAY,EAC+CC,GAAAC,KAAAD,aAAAA,EAXtCC,KAAAC,eAA2B,GAC3BD,KAAAE,aAAe,GACfF,KAAAG,gBAAkB,IACRH,KAAAI,WAAa,IAAIC,EAAAA,aAE5BL,KAAAM,OAAmB,GACnBN,KAAAO,aAAe,GACfP,KAAAQ,oBAAsB,EACtBR,KAAAS,SAAuC,KAM/CT,KAAAU,SAAW,SAACJ,KAEZN,KAAAW,UAAY,oBA3BZC,OAAAC,eAAIf,EAAAgB,UAAA,QAAK,KAAT,WACE,OAAOd,KAAKM,YAGd,SAAUS,GACRf,KAAKM,OAASS,EACdf,KAAKU,SAASK,GACdf,KAAKW,6CAsBPb,EAAAgB,UAAAE,iBAAA,SAAiBC,GACfjB,KAAKU,SAAWO,GAGlBnB,EAAAgB,UAAAI,kBAAA,SAAkBD,GAChBjB,KAAKW,UAAYM,GAGnBnB,EAAAgB,UAAAK,WAAA,SAAWC,GAAX,IAAAC,EAAArB,KACMoB,IACFpB,KAAKoB,MAAQA,EAAME,KAAI,SAACC,GAAM,OAAAF,EAAKtB,aAAawB,MAChDvB,KAAKwB,2BAIT1B,EAAAgB,UAAAW,SAAA,WACE,OAAOzB,KAAKS,UAIdX,EAAAgB,UAAAY,YAAA,SAAYC,GAER3B,KAAK4B,eACJ5B,KAAK4B,aAAaC,cAAcC,SAASH,EAAMI,SAChD/B,KAAK4B,aAAaC,cAAcT,OAEhCpB,KAAKgC,OAAOhC,KAAK4B,aAAaC,cAAcT,QAIhDtB,EAAAgB,UAAAkB,OAAA,SAAOC,GACL,IAAMC,EAAelC,KAAKD,aAAakC,GACjCE,EAAqC,IAAxBD,EAAaE,OAC1BC,GACHH,EAAaE,QACbpC,KAAKE,cAAgBgC,EAAaE,OAASpC,KAAKE,aAC7CoC,EAAetC,KAAKoB,MAAMmB,QAAQL,IAAiB,EACnDM,EACJxC,KAAKQ,oBAAsBR,KAAKG,gBAYlC,IAVKgC,GAAcE,IACjBrC,KAAKS,SAAW,CACdgC,QAAS,4BAA4BzC,KAAKE,aAAY,gBAItDoC,IACFtC,KAAKS,SAAW,CAAEgC,QAAS,6BAGzBD,EAAwB,CAC1B,IAAME,EAAkC,IAAzB1C,KAAKG,gBAAwB,GAAK,IACjDH,KAAKS,SAAW,CACdgC,QAAS,iBAAiBzC,KAAKG,gBAAe,OAAOuC,GAKtDP,GACAE,GACAC,GACAE,IACDxC,KAAK4B,eAEL5B,KAAKS,SAAW,KAChBT,KAAKoB,MAAMuB,KAAKT,GAChBlC,KAAKwB,yBACLxB,KAAK4B,aAAaC,cAAcT,MAAQ,IAG1CpB,KAAKoB,MAAQpB,KAAKoB,MAClBpB,KAAK4C,SAGP9C,EAAAgB,UAAA+B,YAAA,SAAYlB,GACV,IAAMmB,EAAQnB,EAAMI,OAEpB/B,KAAKS,SAAW,KAChBT,KAAKoB,MAAQpB,KAAKoB,MAElBpB,KAAKI,WAAW2C,KAAKD,EAAM1B,OAEzBO,EAAMqB,UAAY9D,EAAAA,SAAS+D,WACE,IAA7BjD,KAAKO,aAAa6B,QAElBpC,KAAKM,OAAO4C,MACZlD,KAAKwB,0BAELG,EAAMqB,UAAY9D,EAAAA,SAASiE,OAC3BxB,EAAMqB,UAAY9D,EAAAA,SAASkE,OAC3BzB,EAAMqB,UAAY9D,EAAAA,SAASmE,KAE3BrD,KAAKgC,OAAOc,EAAM1B,OAGpBpB,KAAKO,aAAeuC,EAAM1B,OAG5BtB,EAAAgB,UAAAwC,0BAAA,SAA0B3B,GACpBA,EAAMqB,UAAY9D,EAAAA,SAASmE,KAAOrD,KAAKO,aAAa6B,OAAS,GAC/DT,EAAM4B,kBAIVzD,EAAAgB,UAAA0C,YAAA,SAAY7B,EAAmBP,GAC7BO,EAAM4B,iBACFnC,EAAMgB,OAAS,GACjBpC,KAAKgC,OAAOZ,IAIhBtB,EAAAgB,UAAA2C,gBAAA,SAAgBxB,GACdjC,KAAKgC,OAAOC,IAGdnC,EAAAgB,UAAA4C,UAAA,SAAUzB,EAAaN,GACjBA,EAAMqB,UAAY9D,EAAAA,SAASiE,QAC7BnD,KAAKoB,MAAQpB,KAAKM,OAAOqD,QAAO,SAACC,GAAM,OAAAA,IAAM3B,KAC7CjC,KAAKwB,2BAIT1B,EAAAgB,UAAA8B,MAAA,iBACmB,QAAjBiB,EAAA7D,KAAK4B,oBAAY,IAAAiC,GAAAA,EAAEhC,cAAce,SAGnC9C,EAAAgB,UAAAU,uBAAA,WACExB,KAAKQ,oBAAsBR,KAAKoB,MAAMgB,OAClCpC,KAAKoB,MAAM0C,WAAWC,MAAM,KAAK3B,OACjC,iBAIQ4B,EAAU/B,GACxB,OAAOA,EACJgC,OACAC,QAAQ,WAAY,KACpBA,QAAQ,MAAO,IACfC,+CAxKQrE,GAAoBsE,EAAAC,kBAuBrBlF,sCAvBCW,EAAoBwE,UAAA,CAAA,CAAA,kBAAAC,UAAA,SAAAC,EAAAC,mLAApBA,EAAA/C,YAAAgD,MAAmB,EAAAN,EAAAO,4LAdnB,CACT,CACEC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAjF,KAC9BkF,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,YAAW,WAAM,OAAAjF,KAC9BkF,OAAO,MAEVE,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,gBAAA,EAAA,SAAA,CAAA,QAAA,qBAAA,EAAA,QAAA,WAAA,CAAA,OAAA,OAAA,aAAA,OAAA,EAAA,uBAAA,EAAA,QAAA,WAAA,CAAA,eAAA,IAAA,CAAA,OAAA,SAAA,aAAA,UAAA,QAAA,UAAA,EAAA,qBAAA,EAAA,SAAA,CAAA,QAAA,4BAAA,EAAA,QAAA,CAAA,EAAA,sBAAA,CAAA,OAAA,SAAA,EAAA,SAAA,CAAA,EAAA,6BAAA,CAAA,OAAA,SAAA,QAAA,iCAAA,EAAA,QAAA,EAAA,QAAA,WAAA,CAAA,OAAA,SAAA,EAAA,iCAAA,EAAA,UAAAC,SAAA,SAAAb,EAAAC,sCEnDHpF,EAAAA,eAAAA,EAAAA,MAAAA,GAAKE,EAAAA,WAAAA,SAAAA,WAAAA,OAASkF,EAAA7B,WACZhD,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,GAMAP,EAAAA,eAAAA,EAAAA,QAAAA,EAAAA,GAA8GE,EAAAA,WAAAA,SAAAA,SAAAA,GAAAA,OAASkF,EAAA5B,YAAA6B,KAATnF,CAA6B,WAAA,SAAAmF,GAAA,OAAYD,EAAAnB,0BAAAoB,MAAvJlF,EAAAA,eAEAH,EAAAA,eAAAA,EAAAA,SAAAA,GAA2DE,EAAAA,WAAAA,SAAAA,SAAAA,GAAAA,EAAAA,cAAAA,GAAAA,IAAAA,EAAAA,EAAAA,YAAAA,GAAAA,OAASkF,EAAAjB,YAAAkB,EAAAY,EAAAlE,UAClE9B,EAAAA,OAAAA,EAAAA,OACFE,EAAAA,eACFA,EAAAA,eAEAI,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,kCAbuBH,EAAAA,UAAAA,GAAAI,EAAAA,WAAAA,UAAAA,EAAAA,OAM8BJ,EAAAA,UAAAA,GAAA8F,EAAAA,YAAAA,QAAAA,GAAAA,EAAAA,MAAAA,OAAAA,GAAAA,MAO/C9F,EAAAA,UAAAA,GAAAI,EAAAA,WAAAA,OAAAA,EAAAA,MAAAA,QAAAA,EAAAA,gBAAAA,EAAAA,eAAAA,otDCDN,SAAA2F,YACSA,EAAAC,QAAP,SAAeC,GACb,YADa,IAAAA,IAAAA,EAAA,CAAW3F,aAAYiE,IAC7B,CACL2B,SAAUH,EACVI,UAAW,CACT,CACEhB,QAASzF,EACT0G,SAAUH,EAAO3F,sDAPdyF,iEAAAA,IAAiBM,QAAA,CAJnB,CAACC,EAAAA,kFAICP,EAAiB,CAAAQ,aAAA,CAHblG,GAAoBgG,QAAA,CADzBC,EAAAA,cAAYE,QAAA,CAEZnG","sourcesContent":["import {\n  forwardRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  ViewChild,\n  Inject,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport {\n  NGX_INPUT_TAG_TAG_FORMATTER,\n  TagFormatter,\n} from './ngx-input-tag.di-tokens';\n\nexport enum KeyCodes {\n  Backspace = 8,\n  Tab = 9,\n  Enter = 13,\n  Escape = 27,\n  LeftArrow = 37,\n  UpArrow = 38,\n  RightArrow = 39,\n  DownArrow = 40,\n  Comma = 188,\n}\n\n@Component({\n  selector: 'ngx-input-tag',\n  templateUrl: './ngx-input-tag.component.html',\n  styleUrls: ['./ngx-input-tag.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxInputTagComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => NgxInputTagComponent),\n      multi: true,\n    },\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class NgxInputTagComponent implements ControlValueAccessor {\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = val;\n    this.onChange(val);\n    this.onTouched();\n  }\n\n  @ViewChild('inputElement', { static: false }) inputElement?: ElementRef;\n  @Input() tagSuggestions: string[] = [];\n  @Input() maxTagLength = 25;\n  @Input() maxNumberOfTags = 1000;\n  @Output() readonly textChange = new EventEmitter<string>();\n\n  private _value: string[] = [];\n  private prevTagInput = '';\n  private currentNumberOfTags = 0;\n  private tagError: { message: string } | null = null;\n\n  constructor(\n    @Inject(NGX_INPUT_TAG_TAG_FORMATTER) private tagFormatter: TagFormatter\n  ) {}\n\n  onChange = (_value: string[]) => {};\n\n  onTouched = () => {};\n\n  registerOnChange(fn: (value: string[]) => void) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void) {\n    this.onTouched = fn;\n  }\n\n  writeValue(value: string[]) {\n    if (value) {\n      this.value = value.map((v) => this.tagFormatter(v));\n      this.setCurrentNumberOfTags();\n    }\n  }\n\n  validate() {\n    return this.tagError;\n  }\n\n  @HostListener('document:click', ['$event'])\n  handleClick(event: MouseEvent) {\n    if (\n      this.inputElement &&\n      !this.inputElement.nativeElement.contains(event.target) &&\n      this.inputElement.nativeElement.value\n    ) {\n      this.addTag(this.inputElement.nativeElement.value);\n    }\n  }\n\n  addTag(tag: string) {\n    const formattedTag = this.tagFormatter(tag);\n    const tagIsEmpty = formattedTag.length === 0;\n    const invalidTagLength =\n      !formattedTag.length ||\n      (this.maxTagLength && formattedTag.length > this.maxTagLength);\n    const duplicateTag = this.value.indexOf(formattedTag) > -1;\n    const exceedsMaxNumberOfTags =\n      this.currentNumberOfTags > this.maxNumberOfTags;\n\n    if (!tagIsEmpty && invalidTagLength) {\n      this.tagError = {\n        message: `Tag length cannot exceed ${this.maxTagLength} characters`,\n      };\n    }\n\n    if (duplicateTag) {\n      this.tagError = { message: 'Cannot add duplicate tag' };\n    }\n\n    if (exceedsMaxNumberOfTags) {\n      const plural = this.maxNumberOfTags === 1 ? '' : 's';\n      this.tagError = {\n        message: `Cannot exceed ${this.maxNumberOfTags} tag${plural}`,\n      };\n    }\n\n    if (\n      !tagIsEmpty &&\n      !invalidTagLength &&\n      !duplicateTag &&\n      !exceedsMaxNumberOfTags &&\n      this.inputElement\n    ) {\n      this.tagError = null;\n      this.value.push(formattedTag);\n      this.setCurrentNumberOfTags();\n      this.inputElement.nativeElement.value = '';\n    }\n\n    this.value = this.value;\n    this.focus();\n  }\n\n  addTagEvent(event: KeyboardEvent) {\n    const input = event.target as HTMLInputElement;\n\n    this.tagError = null;\n    this.value = this.value;\n\n    this.textChange.emit(input.value);\n    if (\n      event.keyCode === KeyCodes.Backspace &&\n      this.prevTagInput.length === 0\n    ) {\n      this._value.pop();\n      this.setCurrentNumberOfTags();\n    } else if (\n      event.keyCode === KeyCodes.Enter ||\n      event.keyCode === KeyCodes.Comma ||\n      event.keyCode === KeyCodes.Tab\n    ) {\n      this.addTag(input.value);\n    }\n\n    this.prevTagInput = input.value;\n  }\n\n  preventDefaultTabBehavior(event: KeyboardEvent) {\n    if (event.keyCode === KeyCodes.Tab && this.prevTagInput.length > 0) {\n      event.preventDefault();\n    }\n  }\n\n  addTagClick(event: MouseEvent, value: string) {\n    event.preventDefault();\n    if (value.length > 0) {\n      this.addTag(value);\n    }\n  }\n\n  addSuggestedTag(tag: string) {\n    this.addTag(tag);\n  }\n\n  removeTag(tag: string, event: any) {\n    if (event.keyCode !== KeyCodes.Enter) {\n      this.value = this._value.filter((t) => t !== tag);\n      this.setCurrentNumberOfTags();\n    }\n  }\n\n  focus() {\n    this.inputElement?.nativeElement.focus();\n  }\n\n  setCurrentNumberOfTags() {\n    this.currentNumberOfTags = this.value.length\n      ? this.value.toString().split(',').length\n      : 0;\n  }\n}\n\nexport function formatter(tag: string): string {\n  return tag\n    .trim()\n    .replace(/(\\s|-)+/g, '-')\n    .replace(/\\,/g, '')\n    .toLowerCase();\n}\n","import { InjectionToken } from '@angular/core';\n\nexport type TagFormatter = (tag: string) => string;\n\nexport const NGX_INPUT_TAG_TAG_FORMATTER = new InjectionToken<TagFormatter>(\n  'NGX_INPUT_TAG_TAG_FORMATTER'\n);\n","<div (click)=\"focus()\" class=\"ngx-input-tag\">\n  <div *ngFor=\"let tag of value\" class=\"ngx-input-tag__tag\">\n    {{tag}}\n    <button type=\"button\" (click)=\"removeTag(tag, $event)\">\n      &#10006;\n    </button>\n  </div>\n  <input type=\"text\" #inputElement aria-label=\"Tags\" [style.width]=\"inputElement.value.length * 10 + 10 + 'px'\" (keyup)=\"addTagEvent($event)\" (keydown)=\"preventDefaultTabBehavior($event)\"\n    class=\"ngx-input-tag__input\" />\n  <button type=\"button\" aria-label=\"Add Tag\" title=\"Add Tag\" (click)=\"addTagClick($event, inputElement.value)\" class=\"ngx-input-tag__btn\">\n    +\n  </button>\n</div>\n\n<div *ngIf=\"inputElement.value.length && tagSuggestions && tagSuggestions.length\" class=\"ngx-input-tag-suggestions\">\n  <button type=\"button\" (click)=\"addSuggestedTag(tag)\" *ngFor=\"let tag of tagSuggestions\" class=\"ngx-input-tag-suggestions__tag\">{{tag}}</button>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  NgxInputTagComponent,\n  formatter as tagFormatter,\n} from './ngx-input-tag.component';\nimport { NGX_INPUT_TAG_TAG_FORMATTER } from './ngx-input-tag.di-tokens';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [NgxInputTagComponent],\n  exports: [NgxInputTagComponent],\n})\nexport class NgxInputTagModule {\n  static forRoot(config = { tagFormatter }) {\n    return {\n      ngModule: NgxInputTagModule,\n      providers: [\n        {\n          provide: NGX_INPUT_TAG_TAG_FORMATTER,\n          useValue: config.tagFormatter,\n        },\n      ],\n    };\n  }\n}\n"]}