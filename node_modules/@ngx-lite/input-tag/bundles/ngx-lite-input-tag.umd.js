(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ngx-lite/input-tag', ['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-lite'] = global['ngx-lite'] || {}, global['ngx-lite']['input-tag'] = {}), global.ng.core, global.ng.forms, global.ng.common));
}(this, (function (exports, i0, forms, i1) { 'use strict';

    var NGX_INPUT_TAG_TAG_FORMATTER = new i0.InjectionToken('NGX_INPUT_TAG_TAG_FORMATTER');

    var _c0 = ["inputElement"];
    function NgxInputTagComponent_div_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r5_1 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 6);
            i0.ɵɵtext(1);
            i0.ɵɵelementStart(2, "button", 7);
            i0.ɵɵlistener("click", function NgxInputTagComponent_div_1_Template_button_click_2_listener($event) { i0.ɵɵrestoreView(_r5_1); var tag_r3 = ctx.$implicit; var ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.removeTag(tag_r3, $event); });
            i0.ɵɵtext(3, " \u2716 ");
            i0.ɵɵelementEnd();
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            var tag_r3 = ctx.$implicit;
            i0.ɵɵadvance(1);
            i0.ɵɵtextInterpolate1(" ", tag_r3, " ");
        }
    }
    function NgxInputTagComponent_div_6_button_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r9_1 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "button", 10);
            i0.ɵɵlistener("click", function NgxInputTagComponent_div_6_button_1_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r9_1); var tag_r7 = ctx.$implicit; var ctx_r8 = i0.ɵɵnextContext(2); return ctx_r8.addSuggestedTag(tag_r7); });
            i0.ɵɵtext(1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            var tag_r7 = ctx.$implicit;
            i0.ɵɵadvance(1);
            i0.ɵɵtextInterpolate(tag_r7);
        }
    }
    function NgxInputTagComponent_div_6_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 8);
            i0.ɵɵtemplate(1, NgxInputTagComponent_div_6_button_1_Template, 2, 1, "button", 9);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r2 = i0.ɵɵnextContext();
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx_r2.tagSuggestions);
        }
    }
    (function (KeyCodes) {
        KeyCodes[KeyCodes["Backspace"] = 8] = "Backspace";
        KeyCodes[KeyCodes["Tab"] = 9] = "Tab";
        KeyCodes[KeyCodes["Enter"] = 13] = "Enter";
        KeyCodes[KeyCodes["Escape"] = 27] = "Escape";
        KeyCodes[KeyCodes["LeftArrow"] = 37] = "LeftArrow";
        KeyCodes[KeyCodes["UpArrow"] = 38] = "UpArrow";
        KeyCodes[KeyCodes["RightArrow"] = 39] = "RightArrow";
        KeyCodes[KeyCodes["DownArrow"] = 40] = "DownArrow";
        KeyCodes[KeyCodes["Comma"] = 188] = "Comma";
    })(exports.KeyCodes || (exports.KeyCodes = {}));
    var NgxInputTagComponent = /** @class */ (function () {
        function NgxInputTagComponent(tagFormatter) {
            this.tagFormatter = tagFormatter;
            this.tagSuggestions = [];
            this.maxTagLength = 25;
            this.maxNumberOfTags = 1000;
            this.textChange = new i0.EventEmitter();
            this._value = [];
            this.prevTagInput = '';
            this.currentNumberOfTags = 0;
            this.tagError = null;
            this.onChange = function (_value) { };
            this.onTouched = function () { };
        }
        Object.defineProperty(NgxInputTagComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (val) {
                this._value = val;
                this.onChange(val);
                this.onTouched();
            },
            enumerable: false,
            configurable: true
        });
        NgxInputTagComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        NgxInputTagComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        NgxInputTagComponent.prototype.writeValue = function (value) {
            var _this = this;
            if (value) {
                this.value = value.map(function (v) { return _this.tagFormatter(v); });
                this.setCurrentNumberOfTags();
            }
        };
        NgxInputTagComponent.prototype.validate = function () {
            return this.tagError;
        };
        NgxInputTagComponent.prototype.handleClick = function (event) {
            if (this.inputElement &&
                !this.inputElement.nativeElement.contains(event.target) &&
                this.inputElement.nativeElement.value) {
                this.addTag(this.inputElement.nativeElement.value);
            }
        };
        NgxInputTagComponent.prototype.addTag = function (tag) {
            var formattedTag = this.tagFormatter(tag);
            var tagIsEmpty = formattedTag.length === 0;
            var invalidTagLength = !formattedTag.length ||
                (this.maxTagLength && formattedTag.length > this.maxTagLength);
            var duplicateTag = this.value.indexOf(formattedTag) > -1;
            var exceedsMaxNumberOfTags = this.currentNumberOfTags > this.maxNumberOfTags;
            if (!tagIsEmpty && invalidTagLength) {
                this.tagError = {
                    message: "Tag length cannot exceed " + this.maxTagLength + " characters",
                };
            }
            if (duplicateTag) {
                this.tagError = { message: 'Cannot add duplicate tag' };
            }
            if (exceedsMaxNumberOfTags) {
                var plural = this.maxNumberOfTags === 1 ? '' : 's';
                this.tagError = {
                    message: "Cannot exceed " + this.maxNumberOfTags + " tag" + plural,
                };
            }
            if (!tagIsEmpty &&
                !invalidTagLength &&
                !duplicateTag &&
                !exceedsMaxNumberOfTags &&
                this.inputElement) {
                this.tagError = null;
                this.value.push(formattedTag);
                this.setCurrentNumberOfTags();
                this.inputElement.nativeElement.value = '';
            }
            this.value = this.value;
            this.focus();
        };
        NgxInputTagComponent.prototype.addTagEvent = function (event) {
            var input = event.target;
            this.tagError = null;
            this.value = this.value;
            this.textChange.emit(input.value);
            if (event.keyCode === exports.KeyCodes.Backspace &&
                this.prevTagInput.length === 0) {
                this._value.pop();
                this.setCurrentNumberOfTags();
            }
            else if (event.keyCode === exports.KeyCodes.Enter ||
                event.keyCode === exports.KeyCodes.Comma ||
                event.keyCode === exports.KeyCodes.Tab) {
                this.addTag(input.value);
            }
            this.prevTagInput = input.value;
        };
        NgxInputTagComponent.prototype.preventDefaultTabBehavior = function (event) {
            if (event.keyCode === exports.KeyCodes.Tab && this.prevTagInput.length > 0) {
                event.preventDefault();
            }
        };
        NgxInputTagComponent.prototype.addTagClick = function (event, value) {
            event.preventDefault();
            if (value.length > 0) {
                this.addTag(value);
            }
        };
        NgxInputTagComponent.prototype.addSuggestedTag = function (tag) {
            this.addTag(tag);
        };
        NgxInputTagComponent.prototype.removeTag = function (tag, event) {
            if (event.keyCode !== exports.KeyCodes.Enter) {
                this.value = this._value.filter(function (t) { return t !== tag; });
                this.setCurrentNumberOfTags();
            }
        };
        NgxInputTagComponent.prototype.focus = function () {
            var _a;
            (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.nativeElement.focus();
        };
        NgxInputTagComponent.prototype.setCurrentNumberOfTags = function () {
            this.currentNumberOfTags = this.value.length
                ? this.value.toString().split(',').length
                : 0;
        };
        return NgxInputTagComponent;
    }());
    NgxInputTagComponent.ɵfac = function NgxInputTagComponent_Factory(t) { return new (t || NgxInputTagComponent)(i0.ɵɵdirectiveInject(NGX_INPUT_TAG_TAG_FORMATTER)); };
    NgxInputTagComponent.ɵcmp = i0.ɵɵdefineComponent({ type: NgxInputTagComponent, selectors: [["ngx-input-tag"]], viewQuery: function NgxInputTagComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0.ɵɵviewQuery(_c0, true);
            }
            if (rf & 2) {
                var _t = void 0;
                i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
            }
        }, hostBindings: function NgxInputTagComponent_HostBindings(rf, ctx) {
            if (rf & 1) {
                i0.ɵɵlistener("click", function NgxInputTagComponent_click_HostBindingHandler($event) { return ctx.handleClick($event); }, false, i0.ɵɵresolveDocument);
            }
        }, inputs: { tagSuggestions: "tagSuggestions", maxTagLength: "maxTagLength", maxNumberOfTags: "maxNumberOfTags" }, outputs: { textChange: "textChange" }, features: [i0.ɵɵProvidersFeature([
                {
                    provide: forms.NG_VALUE_ACCESSOR,
                    useExisting: i0.forwardRef(function () { return NgxInputTagComponent; }),
                    multi: true,
                },
                {
                    provide: forms.NG_VALIDATORS,
                    useExisting: i0.forwardRef(function () { return NgxInputTagComponent; }),
                    multi: true,
                },
            ])], decls: 7, vars: 4, consts: [[1, "ngx-input-tag", 3, "click"], ["class", "ngx-input-tag__tag", 4, "ngFor", "ngForOf"], ["type", "text", "aria-label", "Tags", 1, "ngx-input-tag__input", 3, "keyup", "keydown"], ["inputElement", ""], ["type", "button", "aria-label", "Add Tag", "title", "Add Tag", 1, "ngx-input-tag__btn", 3, "click"], ["class", "ngx-input-tag-suggestions", 4, "ngIf"], [1, "ngx-input-tag__tag"], ["type", "button", 3, "click"], [1, "ngx-input-tag-suggestions"], ["type", "button", "class", "ngx-input-tag-suggestions__tag", 3, "click", 4, "ngFor", "ngForOf"], ["type", "button", 1, "ngx-input-tag-suggestions__tag", 3, "click"]], template: function NgxInputTagComponent_Template(rf, ctx) {
            if (rf & 1) {
                var _r10_1 = i0.ɵɵgetCurrentView();
                i0.ɵɵelementStart(0, "div", 0);
                i0.ɵɵlistener("click", function NgxInputTagComponent_Template_div_click_0_listener() { return ctx.focus(); });
                i0.ɵɵtemplate(1, NgxInputTagComponent_div_1_Template, 4, 1, "div", 1);
                i0.ɵɵelementStart(2, "input", 2, 3);
                i0.ɵɵlistener("keyup", function NgxInputTagComponent_Template_input_keyup_2_listener($event) { return ctx.addTagEvent($event); })("keydown", function NgxInputTagComponent_Template_input_keydown_2_listener($event) { return ctx.preventDefaultTabBehavior($event); });
                i0.ɵɵelementEnd();
                i0.ɵɵelementStart(4, "button", 4);
                i0.ɵɵlistener("click", function NgxInputTagComponent_Template_button_click_4_listener($event) { i0.ɵɵrestoreView(_r10_1); var _r1 = i0.ɵɵreference(3); return ctx.addTagClick($event, _r1.value); });
                i0.ɵɵtext(5, " + ");
                i0.ɵɵelementEnd();
                i0.ɵɵelementEnd();
                i0.ɵɵtemplate(6, NgxInputTagComponent_div_6_Template, 2, 1, "div", 5);
            }
            if (rf & 2) {
                var _r1 = i0.ɵɵreference(3);
                i0.ɵɵadvance(1);
                i0.ɵɵproperty("ngForOf", ctx.value);
                i0.ɵɵadvance(1);
                i0.ɵɵstyleProp("width", _r1.value.length * 10 + 10 + "px");
                i0.ɵɵadvance(4);
                i0.ɵɵproperty("ngIf", _r1.value.length && ctx.tagSuggestions && ctx.tagSuggestions.length);
            }
        }, directives: [i1.NgForOf, i1.NgIf], styles: ["*,:after,:before{box-sizing:border-box}ngx-input-tag{--color-add-button:#ccc;--color-add-button-background:#fff;--color-background:#fff;--color-border:#dbdbdb;--color-tag-close:#ccc;--color-tag-suggestion-hover:#f2f2f2;display:inline-block;margin-bottom:12px;width:100%}.ngx-input-tag{background-color:#fff;background-color:var(--color-background);border:1px solid #dbdbdb;border:1px solid var(--color-border);font-size:16px;margin-bottom:0;padding:5px 80px 4.5px 4px;position:relative}.ngx-input-tag:focus{outline:initial}.ngx-input-tag__input{border:0;font-size:16px;margin-bottom:0;margin-left:4px;max-width:calc(100% + 70px);min-height:29px;min-width:4px;outline:none;padding:4px 0;width:8px}.ngx-input-tag__tag{border:1px solid #dbdbdb;border:1px solid var(--color-border);border-radius:2px;display:inline-block;height:29px;line-height:18px;margin-right:4px;padding:4px}.ngx-input-tag__tag button{background:transparent;border:0;color:var(--color-tag-close);cursor:pointer}.ngx-input-tag__btn{background-color:#fff;background-color:var(--color-add-button-background);color:#ccc;color:var(--color-add-button);cursor:pointer;font-size:30px;height:41px;position:absolute;right:-1px;top:-1px;width:50px}.ngx-input-tag-suggestions,.ngx-input-tag__btn{border:1px solid #dbdbdb;border:1px solid var(--color-border)}.ngx-input-tag-suggestions{background-color:#fff;background-color:var(--color-background)}.ngx-input-tag-suggestions__tag{background:transparent;border:0;cursor:pointer;display:block;padding:10px 14px;text-align:left;width:100%}.ngx-input-tag-suggestions__tag:hover{background:#f2f2f2;background:var(--color-tag-suggestion-hover)}"], encapsulation: 2, changeDetection: 0 });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(NgxInputTagComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'ngx-input-tag',
                        templateUrl: './ngx-input-tag.component.html',
                        styleUrls: ['./ngx-input-tag.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NgxInputTagComponent; }),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: i0.forwardRef(function () { return NgxInputTagComponent; }),
                                multi: true,
                            },
                        ],
                        encapsulation: i0.ViewEncapsulation.None,
                    }]
            }], function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [NGX_INPUT_TAG_TAG_FORMATTER]
                        }] }];
        }, { inputElement: [{
                    type: i0.ViewChild,
                    args: ['inputElement', { static: false }]
                }], tagSuggestions: [{
                    type: i0.Input
                }], maxTagLength: [{
                    type: i0.Input
                }], maxNumberOfTags: [{
                    type: i0.Input
                }], textChange: [{
                    type: i0.Output
                }], handleClick: [{
                    type: i0.HostListener,
                    args: ['document:click', ['$event']]
                }] });
    })();
    function formatter(tag) {
        return tag
            .trim()
            .replace(/(\s|-)+/g, '-')
            .replace(/\,/g, '')
            .toLowerCase();
    }

    var NgxInputTagModule = /** @class */ (function () {
        function NgxInputTagModule() {
        }
        NgxInputTagModule.forRoot = function (config) {
            if (config === void 0) { config = { tagFormatter: formatter }; }
            return {
                ngModule: NgxInputTagModule,
                providers: [
                    {
                        provide: NGX_INPUT_TAG_TAG_FORMATTER,
                        useValue: config.tagFormatter,
                    },
                ],
            };
        };
        return NgxInputTagModule;
    }());
    NgxInputTagModule.ɵmod = i0.ɵɵdefineNgModule({ type: NgxInputTagModule });
    NgxInputTagModule.ɵinj = i0.ɵɵdefineInjector({ factory: function NgxInputTagModule_Factory(t) { return new (t || NgxInputTagModule)(); }, imports: [[i1.CommonModule]] });
    (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgxInputTagModule, { declarations: [NgxInputTagComponent], imports: [i1.CommonModule], exports: [NgxInputTagComponent] }); })();
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(NgxInputTagModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.CommonModule],
                        declarations: [NgxInputTagComponent],
                        exports: [NgxInputTagComponent],
                    }]
            }], null, null);
    })();

    /*
     * Public API Surface of ngx-input-tag
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NGX_INPUT_TAG_TAG_FORMATTER = NGX_INPUT_TAG_TAG_FORMATTER;
    exports.NgxInputTagComponent = NgxInputTagComponent;
    exports.NgxInputTagModule = NgxInputTagModule;
    exports.formatter = formatter;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-lite-input-tag.umd.js.map
