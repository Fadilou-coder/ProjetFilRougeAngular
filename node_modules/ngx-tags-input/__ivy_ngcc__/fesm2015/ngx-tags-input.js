import { Component, forwardRef, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { TypeaheadModule } from 'ngx-bootstrap/typeahead';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from 'ngx-bootstrap/typeahead';

function NgxTagsInputComponent_span_1_span_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 6);
    ɵngcc0.ɵɵlistener("click", function NgxTagsInputComponent_span_1_span_2_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const tag_r4 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.removeTag(tag_r4); })("touch", function NgxTagsInputComponent_span_1_span_2_Template_span_touch_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const tag_r4 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.removeTag(tag_r4); });
    ɵngcc0.ɵɵelementStart(1, "span", 7);
    ɵngcc0.ɵɵtext(2, "\u00D7");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 8);
    ɵngcc0.ɵɵtext(4, "Close");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function NgxTagsInputComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵtemplate(2, NgxTagsInputComponent_span_1_span_2_Template, 5, 0, "span", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const tag_r4 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", tag_r4[ctx_r0.displayField], " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isDeleteable(tag_r4));
} }
function NgxTagsInputComponent_input_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 9, 10);
    ɵngcc0.ɵɵlistener("keyup.enter", function NgxTagsInputComponent_input_2_Template_input_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const _r11 = ɵngcc0.ɵɵreference(1); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.addTag(_r11); })("keydown.backspace", function NgxTagsInputComponent_input_2_Template_input_keydown_backspace_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const _r11 = ɵngcc0.ɵɵreference(1); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.removeLastTag(_r11); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placeholder", ctx_r1.getPlaceholder())("disabled", !ctx_r1.canAddTags || ctx_r1.maximumOfTagsReached())("hidden", !ctx_r1.canAddTags || ctx_r1.maximumOfTagsReached());
} }
function NgxTagsInputComponent_ng_template_3_input_0_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 12, 10);
    ɵngcc0.ɵɵlistener("keydown.backspace", function NgxTagsInputComponent_ng_template_3_input_0_Template_input_keydown_backspace_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const _r16 = ɵngcc0.ɵɵreference(1); const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.removeLastTag(_r16); })("ngModelChange", function NgxTagsInputComponent_ng_template_3_input_0_Template_input_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.selected = $event; })("typeaheadOnSelect", function NgxTagsInputComponent_ng_template_3_input_0_Template_input_typeaheadOnSelect_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.typeaheadOnSelect($event); })("typeaheadNoResults", function NgxTagsInputComponent_ng_template_3_input_0_Template_input_typeaheadNoResults_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.typeaheadOnNoMatch($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("placeholder", ctx_r15.getPlaceholder())("ngModel", ctx_r15.selected)("typeahead", ctx_r15.options)("typeaheadOptionField", ctx_r15.displayField)("typeaheadMinLength", ctx_r15.minLengthBeforeOptions)("typeaheadScrollable", ctx_r15.scrollableOptions)("typeaheadLatinize", true)("typeaheadOptionsInScrollableView", ctx_r15.scrollableOptionsInView)("disabled", !ctx_r15.canAddTags || ctx_r15.maximumOfTagsReached())("hidden", !ctx_r15.canAddTags || ctx_r15.maximumOfTagsReached());
} }
function NgxTagsInputComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, NgxTagsInputComponent_ng_template_3_input_0_Template, 2, 10, "input", 11);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.options !== null);
} }
const noop = (/**
 * @return {?}
 */
() => { });
/** @type {?} */
const TAGS_INPUT_TEMPLATE = `
    <div class="tags-input">
        <span class="tags-input__tag label label-primary badge badge-primary" *ngFor="let tag of tags">
            {{tag[displayField]}}
            <span *ngIf="isDeleteable(tag)" role="button" class="tags-input__tag-remove-btn" (click)="removeTag(tag)" (touch)="removeTag(tag)">
                <span aria-hidden="true">&times;</span>
                <span class="sr-only">Close</span>
            </span>
        </span>
        <input
            *ngIf="options === null; else withTypeahead" 
            class="tags-input__input-field" 
            type="text" 
            [placeholder]="getPlaceholder()"
            name="tags"
            (keyup.enter)="addTag(tagInput)" (keydown.backspace)="removeLastTag(tagInput)"
            [disabled]="!canAddTags || maximumOfTagsReached()"
            [hidden]="!canAddTags || maximumOfTagsReached()"
            #tagInput />
        <ng-template #withTypeahead>
          <input
            *ngIf="options !== null" 
            class="tags-input__input-field" 
            type="text" 
            [placeholder]="getPlaceholder()"
            name="tags"
            (keydown.backspace)="removeLastTag(tagInput)"
            [(ngModel)]="selected" 
            [typeahead]="options"
            [typeaheadOptionField]="displayField"
            (typeaheadOnSelect)="typeaheadOnSelect($event)"
            (typeaheadNoResults)="typeaheadOnNoMatch($event)"
            [typeaheadMinLength]="minLengthBeforeOptions"
            [typeaheadScrollable]="scrollableOptions"
            [typeaheadLatinize]="true"
            [typeaheadOptionsInScrollableView]="scrollableOptionsInView"
            [disabled]="!canAddTags || maximumOfTagsReached()"
            [hidden]="!canAddTags || maximumOfTagsReached()"
            #tagInput />
        </ng-template>
    </div>
`;
/** @type {?} */
const TAGS_INPUT_STYLE = `
    :host {
        overflow: auto;
        white-space: nowrap;
    }

    .tags-input {
        align-items: center;
        display: flex;
        flex-wrap: wrap;
    }

    .tags-input__tag {
        display: inline-block;
        margin-bottom: 2px;
        margin-right: 5px;
        padding-right: 0.3em;
    }

    .tags-input__tag-remove-btn {
        cursor: pointer;
        display: inline-block;
        font-size: 12px;
        margin: -3px 0 0 3px;
        padding: 0;
        vertical-align: top;
    }

    .tags-input__input-field {
        border: none;
        flex-grow: 1;
        outline: none;
    }
`;
/** @type {?} */
const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => NgxTagsInputComponent)),
    multi: true
};
class NgxTagsInputComponent {
    constructor() {
        this.selected = '';
        this.tags = [];
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.removeLastOnBackspace = false;
        this.canDeleteTags = true;
        this.canAddTags = true;
        this.placeholder = '';
        this.options = null;
        this.displayField = 'displayValue';
        this.minLengthBeforeOptions = 1;
        this.scrollableOptions = false;
        this.scrollableOptionsInView = 5;
        this.onTagsChanged = new EventEmitter();
        this.onMaxTagsReached = new EventEmitter();
        this.onNoOptionsMatch = new EventEmitter();
    }
    /**
     * @return {?}
     */
    getPlaceholder() {
        if (this.tags && this.tags.length > 0) {
            return '';
        }
        return this.placeholder;
    }
    /**
     * @private
     * @param {?} type
     * @param {?} tag
     * @return {?}
     */
    tagsChanged(type, tag) {
        this.onChangeCallback(this.tags);
        this.onTagsChanged.emit({
            change: type,
            tag: tag
        });
        if (this.maximumOfTagsReached()) {
            this.onMaxTagsReached.emit();
        }
    }
    /**
     * @param {?} tagInput
     * @return {?}
     */
    removeLastTag(tagInput) {
        if (!this.removeLastOnBackspace || !this.tags.length) {
            return;
        }
        if (tagInput.value === '') {
            this.removeTag(this.tags[this.tags.length - 1]);
        }
    }
    /**
     * @param {?} tagInput
     * @return {?}
     */
    addTag(tagInput) {
        if (tagInput.value.trim() !== '') {
            /** @type {?} */
            let tag = {
                [this.displayField]: tagInput.value
            };
            this.addPredefinedTag(tag);
        }
        tagInput.value = '';
    }
    /**
     * @private
     * @param {?} tag
     * @return {?}
     */
    addPredefinedTag(tag) {
        if (!this.maximumOfTagsReached()) {
            this.tags.push(tag);
            this.tagsChanged('add', tag);
        }
    }
    /**
     * @param {?} tagToRemove
     * @return {?}
     */
    removeTag(tagToRemove) {
        if (!this.isDeleteable(tagToRemove)) {
            return;
        }
        this.tags = this.tags.filter((/**
         * @param {?} tag
         * @return {?}
         */
        tag => tagToRemove !== tag));
        this.tagsChanged('remove', tagToRemove);
    }
    /**
     * @return {?}
     */
    maximumOfTagsReached() {
        return typeof this.maxTags !== 'undefined' && this.tags && this.tags.length >= this.maxTags;
    }
    /**
     * @param {?} tag
     * @return {?}
     */
    isDeleteable(tag) {
        if (typeof tag.deleteable !== "undefined" && !tag.deleteable) {
            return false;
        }
        return this.canDeleteTags;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    typeaheadOnSelect(e) {
        if (typeof e.item === 'string') {
            this.addPredefinedTag({
                [this.displayField]: e.value
            });
        }
        else {
            this.addPredefinedTag(e.item);
        }
        this.selected = '';
    }
    /**
     * @param {?} e
     * @return {?}
     */
    typeaheadOnNoMatch(e) {
        if (typeof this.onNoOptionsMatch !== 'undefined') {
            this.onNoOptionsMatch.emit(e);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.tags) {
            this.tags = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
}
NgxTagsInputComponent.ɵfac = function NgxTagsInputComponent_Factory(t) { return new (t || NgxTagsInputComponent)(); };
NgxTagsInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxTagsInputComponent, selectors: [["ngx-tags-input"]], inputs: { removeLastOnBackspace: "removeLastOnBackspace", canDeleteTags: "canDeleteTags", canAddTags: "canAddTags", placeholder: "placeholder", options: "options", displayField: "displayField", minLengthBeforeOptions: "minLengthBeforeOptions", scrollableOptions: "scrollableOptions", scrollableOptionsInView: "scrollableOptionsInView", maxTags: "maxTags" }, outputs: { onTagsChanged: "onTagsChanged", onMaxTagsReached: "onMaxTagsReached", onNoOptionsMatch: "onNoOptionsMatch" }, features: [ɵngcc0.ɵɵProvidersFeature([CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR])], decls: 5, vars: 3, consts: [[1, "tags-input"], ["class", "tags-input__tag label label-primary badge badge-primary", 4, "ngFor", "ngForOf"], ["class", "tags-input__input-field", "type", "text", "name", "tags", 3, "placeholder", "disabled", "hidden", "keyup.enter", "keydown.backspace", 4, "ngIf", "ngIfElse"], ["withTypeahead", ""], [1, "tags-input__tag", "label", "label-primary", "badge", "badge-primary"], ["role", "button", "class", "tags-input__tag-remove-btn", 3, "click", "touch", 4, "ngIf"], ["role", "button", 1, "tags-input__tag-remove-btn", 3, "click", "touch"], ["aria-hidden", "true"], [1, "sr-only"], ["type", "text", "name", "tags", 1, "tags-input__input-field", 3, "placeholder", "disabled", "hidden", "keyup.enter", "keydown.backspace"], ["tagInput", ""], ["class", "tags-input__input-field", "type", "text", "name", "tags", 3, "placeholder", "ngModel", "typeahead", "typeaheadOptionField", "typeaheadMinLength", "typeaheadScrollable", "typeaheadLatinize", "typeaheadOptionsInScrollableView", "disabled", "hidden", "keydown.backspace", "ngModelChange", "typeaheadOnSelect", "typeaheadNoResults", 4, "ngIf"], ["type", "text", "name", "tags", 1, "tags-input__input-field", 3, "placeholder", "ngModel", "typeahead", "typeaheadOptionField", "typeaheadMinLength", "typeaheadScrollable", "typeaheadLatinize", "typeaheadOptionsInScrollableView", "disabled", "hidden", "keydown.backspace", "ngModelChange", "typeaheadOnSelect", "typeaheadNoResults"]], template: function NgxTagsInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, NgxTagsInputComponent_span_1_Template, 3, 2, "span", 1);
        ɵngcc0.ɵɵtemplate(2, NgxTagsInputComponent_input_2_Template, 2, 3, "input", 2);
        ɵngcc0.ɵɵtemplate(3, NgxTagsInputComponent_ng_template_3_Template, 1, 1, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r2 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tags);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options === null)("ngIfElse", _r2);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc3.TypeaheadDirective], styles: ["[_nghost-%COMP%] {\n        overflow: auto;\n        white-space: nowrap;\n    }\n\n    .tags-input[_ngcontent-%COMP%] {\n        align-items: center;\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    .tags-input__tag[_ngcontent-%COMP%] {\n        display: inline-block;\n        margin-bottom: 2px;\n        margin-right: 5px;\n        padding-right: 0.3em;\n    }\n\n    .tags-input__tag-remove-btn[_ngcontent-%COMP%] {\n        cursor: pointer;\n        display: inline-block;\n        font-size: 12px;\n        margin: -3px 0 0 3px;\n        padding: 0;\n        vertical-align: top;\n    }\n\n    .tags-input__input-field[_ngcontent-%COMP%] {\n        border: none;\n        flex-grow: 1;\n        outline: none;\n    }"] });
NgxTagsInputComponent.propDecorators = {
    maxTags: [{ type: Input }],
    removeLastOnBackspace: [{ type: Input }],
    canDeleteTags: [{ type: Input }],
    canAddTags: [{ type: Input }],
    placeholder: [{ type: Input }],
    options: [{ type: Input }],
    displayField: [{ type: Input }],
    minLengthBeforeOptions: [{ type: Input }],
    scrollableOptions: [{ type: Input }],
    scrollableOptionsInView: [{ type: Input }],
    onTagsChanged: [{ type: Output }],
    onMaxTagsReached: [{ type: Output }],
    onNoOptionsMatch: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxTagsInputComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-tags-input',
                template: TAGS_INPUT_TEMPLATE,
                providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],
                styles: [TAGS_INPUT_STYLE]
            }]
    }], function () { return []; }, { removeLastOnBackspace: [{
            type: Input
        }], canDeleteTags: [{
            type: Input
        }], canAddTags: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], options: [{
            type: Input
        }], displayField: [{
            type: Input
        }], minLengthBeforeOptions: [{
            type: Input
        }], scrollableOptions: [{
            type: Input
        }], scrollableOptionsInView: [{
            type: Input
        }], onTagsChanged: [{
            type: Output
        }], onMaxTagsReached: [{
            type: Output
        }], onNoOptionsMatch: [{
            type: Output
        }], maxTags: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxTagsInputModule {
}
NgxTagsInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxTagsInputModule });
NgxTagsInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxTagsInputModule_Factory(t) { return new (t || NgxTagsInputModule)(); }, imports: [[
            FormsModule,
            CommonModule,
            TypeaheadModule.forRoot()
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxTagsInputModule, { declarations: function () { return [NgxTagsInputComponent]; }, imports: function () { return [FormsModule,
        CommonModule, ɵngcc3.TypeaheadModule]; }, exports: function () { return [NgxTagsInputComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxTagsInputModule, [{
        type: NgModule,
        args: [{
                declarations: [NgxTagsInputComponent],
                imports: [
                    FormsModule,
                    CommonModule,
                    TypeaheadModule.forRoot()
                ],
                exports: [NgxTagsInputComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxTagsInputComponent, NgxTagsInputModule };

//# sourceMappingURL=ngx-tags-input.js.map