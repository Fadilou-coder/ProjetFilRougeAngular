import { Directive, HostListener, Output, EventEmitter, Input } from '@angular/core';
export class NgxScrollEventDirective {
    constructor() {
        this.onscroll = new EventEmitter();
        this.bottomOffset = 100;
        this.topOffset = 100;
    }
    // handle host scroll
    scrolled($event) {
        this.elementScrollEvent($event);
    }
    // handle window scroll
    windowScrolled($event) {
        this.windowScrollEvent($event);
    }
    windowScrollEvent($event) {
        const target = $event.target;
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
        const isReachingTop = scrollTop < this.topOffset;
        const isReachingBottom = (target.body.offsetHeight - (window.innerHeight + scrollTop)) < this.bottomOffset;
        const emitValue = { isReachingBottom, isReachingTop, originalEvent: $event, isWindowEvent: true };
        this.onscroll.emit(emitValue);
    }
    elementScrollEvent($event) {
        const target = $event.target;
        const scrollPosition = target.scrollHeight - target.scrollTop;
        const offsetHeight = target.offsetHeight;
        const isReachingTop = target.scrollTop < this.topOffset;
        const isReachingBottom = (scrollPosition - offsetHeight) < this.bottomOffset;
        const emitValue = { isReachingBottom, isReachingTop, originalEvent: $event, isWindowEvent: false };
        this.onscroll.emit(emitValue);
    }
}
NgxScrollEventDirective.decorators = [
    { type: Directive, args: [{
                selector: '[libScrollEvent]'
            },] }
];
NgxScrollEventDirective.ctorParameters = () => [];
NgxScrollEventDirective.propDecorators = {
    onscroll: [{ type: Output }],
    bottomOffset: [{ type: Input }],
    topOffset: [{ type: Input }],
    scrolled: [{ type: HostListener, args: ['scroll', ['$event'],] }],
    windowScrolled: [{ type: HostListener, args: ['window:scroll', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNjcm9sbC1ldmVudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsLWV2ZW50L3NyYy9saWIvbmd4LXNjcm9sbC1ldmVudC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFjckYsTUFBTSxPQUFPLHVCQUF1QjtJQUtsQztRQUppQixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQWtCLENBQUM7UUFDL0MsaUJBQVksR0FBRyxHQUFHLENBQUM7UUFDbkIsY0FBUyxHQUFHLEdBQUcsQ0FBQztJQUVoQixDQUFDO0lBRWpCLHFCQUFxQjtJQUNzQixRQUFRLENBQUMsTUFBYTtRQUMvRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELHVCQUF1QjtJQUMyQixjQUFjLENBQUMsTUFBYTtRQUM1RSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVTLGlCQUFpQixDQUFDLE1BQWE7UUFDdkMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQWtCLENBQUM7UUFDekMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFdBQVcsSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLFNBQVMsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUM7UUFDM0csTUFBTSxhQUFhLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDakQsTUFBTSxnQkFBZ0IsR0FBRyxDQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUMsQ0FBRSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDN0csTUFBTSxTQUFTLEdBQW1CLEVBQUMsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBQyxDQUFDO1FBQ2hILElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFUyxrQkFBa0IsQ0FBQyxNQUFhO1FBQ3hDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFxQixDQUFDO1FBQzVDLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUM5RCxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDO1FBQ3pDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4RCxNQUFNLGdCQUFnQixHQUFHLENBQUMsY0FBYyxHQUFHLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDN0UsTUFBTSxTQUFTLEdBQW1CLEVBQUMsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBQyxDQUFDO1FBQ2pILElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7OztZQXJDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjthQUM3Qjs7Ozt1QkFFRSxNQUFNOzJCQUNOLEtBQUs7d0JBQ0wsS0FBSzt1QkFLTCxZQUFZLFNBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDOzZCQUtqQyxZQUFZLFNBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBOZ3hTY3JvbGxFdmVudCA9IHtcbiAgaXNSZWFjaGluZ0JvdHRvbTogYm9vbGVhbixcbiAgaXNSZWFjaGluZ1RvcDogYm9vbGVhbixcbiAgb3JpZ2luYWxFdmVudDogRXZlbnQsXG4gIGlzV2luZG93RXZlbnQ6IGJvb2xlYW5cbn07XG5cbmRlY2xhcmUgY29uc3Qgd2luZG93OiBXaW5kb3c7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tsaWJTY3JvbGxFdmVudF0nXG59KVxuZXhwb3J0IGNsYXNzIE5neFNjcm9sbEV2ZW50RGlyZWN0aXZlIHtcbiAgQE91dHB1dCgpIHB1YmxpYyBvbnNjcm9sbCA9IG5ldyBFdmVudEVtaXR0ZXI8Tmd4U2Nyb2xsRXZlbnQ+KCk7XG4gIEBJbnB1dCgpIHB1YmxpYyBib3R0b21PZmZzZXQgPSAxMDA7XG4gIEBJbnB1dCgpIHB1YmxpYyB0b3BPZmZzZXQgPSAxMDA7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICAvLyBoYW5kbGUgaG9zdCBzY3JvbGxcbiAgQEhvc3RMaXN0ZW5lcignc2Nyb2xsJywgWyckZXZlbnQnXSkgcHVibGljIHNjcm9sbGVkKCRldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLmVsZW1lbnRTY3JvbGxFdmVudCgkZXZlbnQpO1xuICB9XG5cbiAgLy8gaGFuZGxlIHdpbmRvdyBzY3JvbGxcbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnNjcm9sbCcsIFsnJGV2ZW50J10pIHB1YmxpYyB3aW5kb3dTY3JvbGxlZCgkZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy53aW5kb3dTY3JvbGxFdmVudCgkZXZlbnQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHdpbmRvd1Njcm9sbEV2ZW50KCRldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCB0YXJnZXQgPSAkZXZlbnQudGFyZ2V0IGFzIERvY3VtZW50O1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wIHx8IDA7XG4gICAgY29uc3QgaXNSZWFjaGluZ1RvcCA9IHNjcm9sbFRvcCA8IHRoaXMudG9wT2Zmc2V0O1xuICAgIGNvbnN0IGlzUmVhY2hpbmdCb3R0b20gPSAoIHRhcmdldC5ib2R5Lm9mZnNldEhlaWdodCAtICh3aW5kb3cuaW5uZXJIZWlnaHQgKyBzY3JvbGxUb3ApICkgPCB0aGlzLmJvdHRvbU9mZnNldDtcbiAgICBjb25zdCBlbWl0VmFsdWU6IE5neFNjcm9sbEV2ZW50ID0ge2lzUmVhY2hpbmdCb3R0b20sIGlzUmVhY2hpbmdUb3AsIG9yaWdpbmFsRXZlbnQ6ICRldmVudCwgaXNXaW5kb3dFdmVudDogdHJ1ZX07XG4gICAgdGhpcy5vbnNjcm9sbC5lbWl0KGVtaXRWYWx1ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZWxlbWVudFNjcm9sbEV2ZW50KCRldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCB0YXJnZXQgPSAkZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IHNjcm9sbFBvc2l0aW9uID0gdGFyZ2V0LnNjcm9sbEhlaWdodCAtIHRhcmdldC5zY3JvbGxUb3A7XG4gICAgY29uc3Qgb2Zmc2V0SGVpZ2h0ID0gdGFyZ2V0Lm9mZnNldEhlaWdodDtcbiAgICBjb25zdCBpc1JlYWNoaW5nVG9wID0gdGFyZ2V0LnNjcm9sbFRvcCA8IHRoaXMudG9wT2Zmc2V0O1xuICAgIGNvbnN0IGlzUmVhY2hpbmdCb3R0b20gPSAoc2Nyb2xsUG9zaXRpb24gLSBvZmZzZXRIZWlnaHQpIDwgdGhpcy5ib3R0b21PZmZzZXQ7XG4gICAgY29uc3QgZW1pdFZhbHVlOiBOZ3hTY3JvbGxFdmVudCA9IHtpc1JlYWNoaW5nQm90dG9tLCBpc1JlYWNoaW5nVG9wLCBvcmlnaW5hbEV2ZW50OiAkZXZlbnQsIGlzV2luZG93RXZlbnQ6IGZhbHNlfTtcbiAgICB0aGlzLm9uc2Nyb2xsLmVtaXQoZW1pdFZhbHVlKTtcbiAgfVxuXG59XG4iXX0=